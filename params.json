{
  "name": "Designpattern",
  "tagline": "DesignPattern Implement By cpp,java...",
  "body": "# DesignPattern\r\n\r\n- DesignPattern Implement By cpp, java, python...\r\n\r\n模式名称|English|java|python|cpp\r\n----|----|----|----|----\r\n[抽象工厂模式](#user-content-抽象工厂模式)|AbstractFactory|[AbstractFactoryPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/AbstractFactoryPattern/AbstractFactoryPattern.java)|[AbstractFactoryPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/AbstractFactoryPattern/AbstractFactoryPattern.py)|X\r\n[适配器模式](#user-content-适配器模式)|Adapter|[AdapterPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/AdapterPattern/AdapterPattern.java)|[AdapterPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/AdapterPattern/AdapterPattern.py)|X\r\n[桥接模式](#user-content-桥接模式)|Bridge|[BridgePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/BridgePattern/BridgePattern.java)|[BridgePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/BridgePattern/BridgePattern.py)|X\r\n[建造者模式](#user-content-建造者模式)|Builder|[BuilderPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/BuilderPattern/BuilderPattern.java)|[BuilderPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/BuilderPattern/BuilderPattern.py)|X\r\n[责任链模式](#user-content-责任链模式)|Chain|[ChainPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/ChainPattern/ChainPattern.java)|[ChainPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/ChainPattern/ChainPattern.py)|X\r\n[命令模式](#user-content-命令模式)|Command|[CommandPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/CommandPattern/CommandPattern.java)|[CommandPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/CommandPattern/CommandPattern.py)|X\r\n[组合模式](#user-content-组合模式)|Composite|[CompositePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/CompositePattern/CompositePattern.java)|[CompositePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/CompositePattern/CompositePattern.py)|X\r\n[装饰模式](#user-content-装饰模式)|Decorator|[DecoratorPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/DecoratorPattern/DecoratorPattern.java)|[DecoratorPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/DecoratorPattern/DecoratorPattern.py)|X\r\n[外观模式](#user-content-外观模式)|Facade|[FacadePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/FacadePattern/FacadePattern.java)|[FacadePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/FacadePattern/FacadePattern.py)|X\r\n[工厂模式](#user-content-工厂模式)|Factory|[FactoryPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/FactoryPattern/FactoryPattern.java)|[FactoryPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/FactoryPattern/FactoryPattern.py)|X\r\n[享元模式](#user-content-享元模式)|Flyweight|[FlyweightPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/FlyweightPattern/FlyweightPattern.java)|[FlyweightPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/FlyweightPattern/FlyweightPattern.py)|X\r\n[解释器模式](#user-content-解释器模式)|Interpreter|[InterpreterPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/InterpreterPattern/InterpreterPattern.java)|[InterpreterPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/InterpreterPattern/InterpreterPattern.py)|X\r\n[迭代器模式](#user-content-迭代器模式)|Iterator|[IteratorPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/IteratorPattern/IteratorPattern.java)|[IteratorPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/IteratorPattern/IteratorPattern.py)|X\r\n[中介模式](#user-content-中介模式)|Mediator|[MediatorPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/MediatorPattern/MediatorPattern.java)|[MediatorPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/MediatorPattern/MediatorPattern.py)|X\r\n[备忘录模式](#user-content-观察者模式)|Memento|[MementoPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/MementoPattern/MementoPattern.java)|[MementoPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/MementoPattern/MementoPattern.py)|X\r\n[观察者模式](#user-content-)|Observer|[ObserverPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/ObserverPattern/ObserverPattern.java)|[ObserverPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/ObserverPattern/ObserverPattern.py)|X\r\n[原型模式](#user-content-原型模式)|Prototype|[PrototypePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/PrototypePattern/PrototypePattern.java)|[PrototypePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/PrototypePattern/PrototypePattern.py)|X\r\n[代理模式](#user-content-代理模式)|Proxy|[ProxyPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/ProxyPattern/ProxyPattern.java)|[ProxyPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/ProxyPattern/ProxyPattern.py)|X\r\n[单例模式](#user-content-单例模式)|Singleton|[SingletonPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/SingletonPattern/SingletonPattern.java)|[SingletonPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/SingletonPattern/SingletonPattern.py)|X\r\n[状态模式](#user-content-状态模式)|State|[StatePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/StatePattern/StatePattern.java)|[StatePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/StatePattern/StatePattern.py)|X\r\n[策略模式](#user-content-策略模式)|Strategy|[StrategyPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/StrategyPattern/StrategyPattern.java)|[StrategyPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/StrategyPattern/StrategyPattern.py)|X\r\n[模板方法模式](#user-content-模板方法模式)|Template|[TemplatePattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/TemplatePattern/TemplatePattern.java)|[TemplatePattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/TemplatePattern/TemplatePattern.py)|X\r\n[访问者模式](#user-content-访问者模式)|Visitor|[VisitorPattern.java](https://github.com/JiangKlijna/DesignPattern/blob/master/VisitorPattern/VisitorPattern.java)|[VisitorPattern.py](https://github.com/JiangKlijna/DesignPattern/blob/master/VisitorPattern/VisitorPattern.py)|X\r\n\r\n- 设计模式所支持的设计的可变方面\r\n\r\n目的|设计模式|可变的方向\r\n----|----|----\r\n创建|AbstractFactory|产品对象家族\r\n......|Builder|如何创建一个组合对象\r\n......|Factory|被实例化的子类\r\n......|Prototype|实例化的子类\r\n......|Singleton|一个类的惟一实例\r\n结构|Adapter|对象的接口\r\n......|Bridge|对象的实现\r\n......|Composite|一个对象的结构和组成\r\n......|Decorator|对象的职责,不生成子类\r\n......|Facade|一个子系统的接口\r\n......|Flyweight|对象的存储开销\r\n......|Proxy|如何访问一个对象;该对象的位置\r\n行为|Chain|满足一个请求的对象\r\n......|Command|何时,怎样满足一个对象\r\n......|Interpreter|一个语言的文法及解释\r\n......|Iterator|如何遍历,访问一个聚合的各元素\r\n......|Mediator|对象间怎样交互,和谁交互\r\n......|Memento|一个对象中哪些私有信息存放在该对象之外,以及在什么时候存储\r\n......|Observer|多个对象依赖于另外一个对象,而这些对象又如何保持一致\r\n......|State|对象的状态\r\n......|Strategy|算法\r\n......|Template|算法中的某些步骤\r\n......|Visitor|某些可以作用于一个(组)对象上的操作,但不能修改这些对象的类\r\n\r\n- 设计模式描述\r\n\r\n#### 抽象工厂模式\r\n* 意图\r\n  * 提供一个创建一系列相关或相互依赖对象的接口,而无需指定他们具体的类\r\n* 适用性\r\n  * 一个系统要独立于它的产品的创建,组合和表示时\r\n  * 一个系统要由多个产品系列中的一个来配置时\r\n  * 当你要强调一系列相关的产品对象的设计以便进行联合使用时\r\n  * 当你提供一个产品类库,而只想显示它们的接口而不是实现时\r\n\r\n#### 适配器模式\r\n* 意图\r\n  * 将一个类的接口转换成客户希望的另外一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\r\n* 适用性\r\n  * 你想使用一个已经存在的类,而他的接口不符合你的需求\r\n  * 你想创建一个可以复用的类,该类可以与其他不相关的类或不可预见的类(即那些接口可能不一定兼容的类)协同工作\r\n  * (仅适用于对象Adapter)你想使用一些已经存在的类,但是不可能对每一个都进行子类化以匹配它们的接口.对象适配器可以适配它的父类接口\r\n\r\n#### 桥接模式\r\n* 意图\r\n  * 将抽象部分与它的实现部分分离,使它们都可以独立地变化\r\n* 适用性\r\n  * 你不希望在抽象和它的实现部分之间有一个固定的绑定关系,这种情况可能是因为,在程序运行时刻实现部分应可以被选择或者切换\r\n  * 类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充,这时使你可以对不同的抽象接口和实现部分进行组合,并分别对它们进行扩充\r\n  * 对一个抽象的实现部分的修改应对客户不产生影响,即客户的代码不必重新编译\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}